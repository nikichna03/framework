using NUnit.Framework;
using Page;
using resources;
using System;
using System.Threading.Tasks;
using Test2.sourse;
using NLog;

namespace Test2
{
    public class EmailLoginTest : BaseTest
    {
        public const string JsonWay = "jsonShop.json";
        private static Logger logger = LogManager.GetCurrentClassLogger();

        [Test]
        public void NavigateLoginWithoutPassword()
        {
            try
            {
    
                driver.Navigate().GoToUrl("https://tea-mail.by/");
                InitPage initPage = new InitPage(driver);
                JsonPost json = new JsonPost(JsonWay);

                logger.Trace("trace message"); 

                logger.Debug("debug message");

                logger.Info("info message");

                logger.Warn("warn message");

                logger.Error("error message");

                logger.Fatal("fatal message");

                var expectation = Task.Factory.StartNew(() => initPage.ClicBut1.Click());
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.Logtxt.SendKeys(json.JsonMail(1,0)));
                expectation.Wait();

                expectation = Task.Factory.StartNew(() => initPage.Logtxt.SendKeys(json.JsonMail(1, 1)));
                expectation.Wait();

                expectation = Task.Factory.StartNew(() => initPage.ClicBut2.Click());
                expectation.Wait();

                string messsge = initPage.ErrorMess.Text;

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                string expectedError = "Неправильное имя пользователя или пароль.";
                Assert.AreEqual(expectedError, messsge, $"{expectedError} != {messsge}");

            }
            catch
            {
                Screen screenshot = new Screen(driver);
                screenshot.MakeScreenshot();
            }
        }
    }
}
using Page;
using NUnit.Framework;
using System.Threading.Tasks;
using System;
using resources;

namespace Test2
{
    public class EmailLoginTestNull : BaseTest
    {
        [Test]
        public void NavigateLoginNull()
        {
            try
            {
                driver.Navigate().GoToUrl("https://tea-mail.by/");
                InitPage initPage = new InitPage(driver);

                var expectation = Task.Factory.StartNew(() => initPage.ClicBut1.Click());
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.ClicBut2.Click());
                expectation.Wait();

                string messsge = initPage.ErrorMessage.Text;

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                string expectedError = "Логин обязателен";
                Assert.AreEqual(expectedError, messsge, $"{expectedError} != {messsge}");

            }
            catch
            {
                Screen screenshot = new Screen(driver);
                screenshot.MakeScreenshot();
            }
        }
    }
}

using NUnit.Framework;
using Page;
using resources;
using System;
using System.Threading.Tasks;
using Test2.sourse;

namespace Test2
{
    public class GetMessageTest : BaseTest
    {
        public const string JsonWay = "jsonMail.json";
        public const string SendMessagText = "TEST";

        public string TextMessage()
        {
            return SendMessagText;
        }

        [Test]
        public void EmailMessage()
        {
            try
            {
                driver.Navigate().GoToUrl("https://passport.yandex.by/");
                InitPage initPage = new InitPage(driver);
                JsonPost json = new JsonPost(JsonWay);

                var expectation = Task.Factory.StartNew(() => initPage.LogTextID.SendKeys(json.JsonMail(0, -5)));
                expectation.Wait();

                expectation = Task.Factory.StartNew(() => initPage.ButLog1.Click());
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.LogTextPassword.SendKeys(json.JsonMail(0, 1)));
                expectation.Wait();

                expectation = Task.Factory.StartNew(() => initPage.ButLog2.Click());
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.ButMenu1.Click());
                expectation.Wait();

                expectation = Task.Factory.StartNew(() => initPage.ButMenu2.Click());
                expectation.Wait();
                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.ButMessage1.Click());
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.recipient.SendKeys(json.JsonMail(0, 2)));
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.text.SendKeys(SendMessagText));
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.ButMessage2.Click());
                expectation.Wait();
            }
            catch
            {
                Screen screenshot = new Screen(driver);
                screenshot.MakeScreenshot();
            }
        }
    }
}

using OpenQA.Selenium;

namespace Page
{
    public class InitPage : BasePage
    {

        public InitPage(IWebDriver driver) : base(driver)
        {

        }

        private By ButLog1Id = By.Id("passp:sign-in");

        private By LogTextIDId = By.Id("passp-field-login");

        private By LogTextPasswordXPas = By.XPath("//input[@name='passwd']");

        private By ButMenu1XPas = By.XPath("//img[@class='user-pic__image']");

        private By ButMenu2XPath = By.XPath("//*[contains(@class, 'action_mail') and not(contains(@class, '-compose'))]");

        private By ButMessage1Name = By.ClassName("js-main-action-compose");

        private By recipientXPas = By.XPath("//div[@class='composeYabbles']");

        private By textXPas = By.XPath("//input[@name='subject']");

        private By ButMessage2Name = By.ClassName("ComposeSendButton_desktop");

        private By ButGetMessageXPath = By.XPath("//span[@title='TEST']");

        private By UnreadTrueName = By.ClassName("state_toRead");

        private By TextMessageName = By.ClassName("qa-MessageViewer-Title");

        private By ButLog = By.XPath("//a[@data-src='/login/']");

        private By Butnext = By.XPath("//input[@value='Войти']");
        
        private By LogText = By.Name("login");

        private By ErrMes =(By.XPath("//em[@data-name='login']"));

        private By ErrMes1 = By.ClassName("wa-error-msg");
        
        private By LogPassw = By.Name("password");


        public IWebElement ClicBut1 => driver.FindElement(ButLog);

        public IWebElement ClicBut2 => driver.FindElement(Butnext);
        
        public IWebElement ErrorMessage => driver.FindElement(ErrMes); 
        
        public IWebElement ErrorMess => driver.FindElement(ErrMes1);
        
        public IWebElement Logtxt => driver.FindElement(LogText);
        
        public IWebElement Logpwrd => driver.FindElement(LogPassw);

        public IWebElement ButLog1 => driver.FindElement(ButLog1Id);

        public IWebElement LogTextID => driver.FindElement(LogTextIDId);

        public IWebElement LogTextPassword => driver.FindElement(LogTextPasswordXPas);

        public IWebElement ButLog2 => driver.FindElement(ButLog1Id);

        public IWebElement ButMenu1 => driver.FindElement(ButMenu1XPas);

        public IWebElement ButMenu2 => driver.FindElement(ButMenu2XPath);

        public IWebElement ButMessage1 => driver.FindElement(ButMessage1Name);

        public IWebElement recipient => driver.FindElement(recipientXPas);

        public IWebElement text => driver.FindElement(textXPas);

        public IWebElement ButMessage2 => driver.FindElement(ButMessage2Name);

        public IWebElement ButGetMessage => driver.FindElement(ButGetMessageXPath);

        public IWebElement UnreadTrue => driver.FindElement(UnreadTrueName);

        public IWebElement TextMessage => driver.FindElement(TextMessageName);
     
    }
}  
using Newtonsoft.Json;
using System.Collections.Generic;
using System.IO;

namespace Test2.sourse
{
    internal class JsonPost
    {
        public string way;
        public JsonPost(string Way) 
        {
            this.way = Way; 
        }

        public struct Info
        {
            public string Email;
            public string Password;
            public string Recipient;
        }

        public string JsonMail(int num, int mailinfonum)
        {
            Info info = new Info();
            using (StreamReader jsonread = new StreamReader(way))
            {
                string json = jsonread.ReadToEnd();
                List<Info> items = JsonConvert.DeserializeObject<List<Info>>(json);

                switch (way)
                {
                    case "jsonMail.json":
                        info.Recipient = items[num].Recipient.ToString();
                        goto case "jsonShop";
                    case "jsonShop":
                        info.Email = items[num].Email.ToString();
                        info.Password = items[num].Password.ToString();
                        break;          
                }
            }
            switch (mailinfonum)
            {
                case 0:
                    return info.Email;
                case 1:
                    return info.Password;
                case 2:
                    return info.Recipient;
            }
            return null;
        }
    }
}

using OpenQA.Selenium;
using System;

namespace resources
{
	public class Screen
	{
		IWebDriver driver;

		public Screen(IWebDriver Driver)
		{
			this.driver = Driver;
		}

		public void MakeScreenshot()
		{
			string name = DateTime.Now.ToString("D-MM/dd/yyyy   T-HH:mm:ss");
			Screenshot picture = ((ITakesScreenshot)driver).GetScreenshot();
			picture.SaveAsFile("D://" + name.Replace(':', '.') + ".png",
					ScreenshotImageFormat.Png);
		}
	}
}
using NUnit.Framework;
using Page;
using resources;
using System;
using System.Threading.Tasks;
using Test2.sourse;

namespace Test2
{
    public class SetMessagecs : BaseTest
    {
        public const string JsonWay = "jsonMail.json";

        [Test]
        public void EmailMessage()
        {
            try
            {
                driver.Navigate().GoToUrl("https://passport.yandex.by/");
                JsonPost json = new JsonPost(JsonWay);
                InitPage initPage = new InitPage(driver);

                var expectation = Task.Factory.StartNew(() => initPage.LogTextID.SendKeys(json.JsonMail(1, 0)));
                expectation.Wait();

                expectation = Task.Factory.StartNew(() => initPage.ButLog1.Click());
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.LogTextPassword.SendKeys(json.JsonMail(1, 1)));
                expectation.Wait();

                expectation = Task.Factory.StartNew(() => initPage.ButLog2.Click());
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.ButMenu1.Click());
                expectation.Wait();

                expectation = Task.Factory.StartNew(() => initPage.ButMenu2.Click());
                expectation.Wait();

                try
                {
                    if (initPage.UnreadTrue.Displayed == true)
                    {
                        expectation = Task.Factory.StartNew(() => initPage.ButGetMessage.Click());
                        expectation.Wait();
                    }
                }
                catch
                {
                    throw new Exception("no incoming messages");
                }
                var a = "";
                expectation = Task.Factory.StartNew(() => a = initPage.TextMessage.Text);
                expectation.Wait();


                expectation = Task.Factory.StartNew(() => initPage.ButMessage1.Click());
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.recipient.SendKeys(json.JsonMail(1, 3)));
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                GetMessageTest getMessageTest = new GetMessageTest();
                if (getMessageTest.TextMessage() == a)
                {
                    expectation = Task.Factory.StartNew(() => initPage.text.SendKeys("Messages converge"));
                    expectation.Wait();

                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                    expectation = Task.Factory.StartNew(() => initPage.ButMessage2.Click());
                    expectation.Wait();
                }
                else
                {
                    expectation = Task.Factory.StartNew(() => initPage.text.SendKeys("Messages don't match"));
                    expectation.Wait();

                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                    expectation = Task.Factory.StartNew(() => initPage.ButMessage2.Click());
                    expectation.Wait();
                }
            }
            catch
            {
                Screen screenshot = new Screen(driver);
                screenshot.MakeScreenshot();
            }
        }
    }
}
using OpenQA.Selenium;

namespace Page
{
    public class BasePage
    {
        protected static IWebDriver driver;
        public BasePage(IWebDriver Wdriver)
        {
            driver = Wdriver;
        }
    }
}

using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.IE;
using WebDriverManager.DriverConfigs.Impl;

namespace Test2
{
    public class BaseTest
    {

        protected IWebDriver driver;

        [SetUp]
        public void SetUp()
        {
            string browserName = "Chrome";
            //string browserName = "Firefox";
            //string browserName = "ie";

            switch (browserName.ToUpper())
            {
                case "CHROME":
                    new WebDriverManager.DriverManager().SetUpDriver(new ChromeConfig());
                    this.driver = new ChromeDriver();
                    break;
                case "FIREFOX":
                    new WebDriverManager.DriverManager().SetUpDriver(new FirefoxConfig());
                    this.driver = new ChromeDriver();
                    break;
                case "IE":
                    new WebDriverManager.DriverManager().SetUpDriver(new InternetExplorerConfig());
                    this.driver = new ChromeDriver();
                    break;
            }
        }

        [TearDown]
        public void TearDown()
        {
            driver.Close();
        }
    }
}
using NUnit.Framework;
using Page;
using resources;
using System;
using System.Threading.Tasks;
using Test2.sourse;

namespace Test2
{
    internal class EmailAndPasswordLoginTest : BaseTest
    {
        public const string JsonWay = "jsonShop.json";

        [Test]
        public void NavigateLoginAndPassword()//значение логина и пароля правильное 
        {
            try
            {
                JsonPost json = new JsonPost(JsonWay);
                InitPage initPage = new InitPage(driver);
                driver.Navigate().GoToUrl("https://tea-mail.by/");

                var expectation = Task.Factory.StartNew(() => initPage.ClicBut1.Click());
                expectation.Wait();

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                expectation = Task.Factory.StartNew(() => initPage.Logtxt.SendKeys(json.JsonMail(0, 0)));
                expectation.Wait();

                expectation = Task.Factory.StartNew(() => initPage.Logtxt.SendKeys(json.JsonMail(0, 1)));
                expectation.Wait();

                expectation = Task.Factory.StartNew(() => initPage.ClicBut2.Click());
                expectation.Wait();

                string messsge = initPage.ErrorMess.Text;

                driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

                string expectedError = "Неправильное имя пользователя или пароль.";
                Assert.AreEqual(expectedError, messsge, $"{expectedError} != {messsge}");
            }
            catch
            {
                Screen screenshot = new Screen(driver);
                screenshot.MakeScreenshot();
            }
        }
    }
}
